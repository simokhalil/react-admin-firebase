{"version":3,"file":"index.mjs","sources":["../src/providers/RealtimeSaga.ts","../src/misc/logger.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/misc/pathHelper.ts","../src/providers/database/ResourceManager.ts","../src/misc/arrayHelpers.ts","../src/providers/database/FirebaseClient.ts","../src/providers/DataProvider.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["import realtimeSaga from \"ra-realtime\";\nimport { fb } from \"./DataProvider\";\nimport { RAFirebaseOptions } from \"index\";\n\nconst observeRequest = (dataProvider, options?: RAFirebaseOptions) => (type, resource, params) => {\n  const safeOptions = options || {};\n  if (Array.isArray(safeOptions.watch)) {\n    const mustWatchResource = safeOptions.watch.includes(resource);\n    if (!mustWatchResource) {\n      return;\n    }\n  }\n  if (Array.isArray(safeOptions.dontwatch)) {\n    const mustNotWatchResource = safeOptions.dontwatch.includes(resource);\n    if (mustNotWatchResource) {\n      return;\n    }\n  }\n\n  return {\n    subscribe(observer) {\n      dataProvider(type, resource, params)\n        .then((results) => observer.next(results)) // New data received, notify the observer\n        .catch((error) => observer.error(error)); // Ouch, an error occured, notify the observer\n\n      const subscription = {\n        unsubscribe() {\n          // Notify the saga that we cleaned up everything\n          // observer.complete();\n          // ^ THIS FAILS FRAMEWORK ISSUE\n        }\n      };\n\n      return subscription;\n    }\n  };\n};\n\nexport function RealtimeSaga(dataProvider, options) {\n  return realtimeSaga(observeRequest(dataProvider, options));\n}\n","import { RAFirebaseOptions } from \"providers/RAFirebaseOptions\";\n\n// UTILS\n\nexport function log(description: string, obj?: {}) {\n  if (ISDEBUG) {\n    console.log(\"react-admin-firebase: \", description, obj);\n  }\n}\n\nexport function logError(description: string, obj?: {}) {\n  if (ISDEBUG) {\n    console.error(\"react-admin-firebase: \", description, obj);\n  }\n}\n\n// tslint:disable-next-line: no-var-keyword\nvar ISDEBUG = false;\n\nexport function CheckLogging(config: {}, options: RAFirebaseOptions) {\n  if ((config && config['debug']) || options.logging) {\n    ISDEBUG = true;\n  }\n}","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import path from 'path-browserify'\n\nexport function getAbsolutePath(rootRef: string, relativePath: string): string {\n  if (!rootRef) {\n    return relativePath;\n  }\n  if (!relativePath) {\n    throw new Error('Resource name must be a string of length greater than 0 characters');\n  }\n  const withSlashes = path.join('/', rootRef, '/', relativePath, '/');\n  const slashCount = withSlashes.split(\"/\").length - 1\n  if (slashCount % 2) {\n    throw new Error(`The rootRef path must point to a \"document\" not a \"collection\"\ne.g. /collection/document/ or /collection/document/collection/document/`);\n  }\n  const withOutSlashes = withSlashes.slice(1, -1);\n  return withOutSlashes;\n}\n\nexport function joinPaths(path1, path2) {\n  return path.join(path1, path2);\n}","// Firebase types\nimport {\n  CollectionReference,\n  QueryDocumentSnapshot,\n  FirebaseFirestore\n} from \"@firebase/firestore-types\";\nimport { RAFirebaseOptions } from \"index\";\nimport { log } from \"../../misc/logger\";\nimport { getAbsolutePath } from \"../../misc/pathHelper\";\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\nimport { User } from \"@firebase/auth-types\";\nimport { messageTypes } from \"../../misc/messageTypes\";\n\nexport interface IResource {\n  path: string;\n  pathAbsolute: string;\n  collection: CollectionReference;\n  list: Array<{}>;\n}\n\nexport class ResourceManager {\n  private resources: {\n    [resourceName: string]: IResource;\n  } = {};\n\n  private db: FirebaseFirestore;\n\n  constructor(\n    private fireWrapper: IFirebaseWrapper,\n    private options: RAFirebaseOptions\n  ) {\n    this.db = fireWrapper.db();\n  }\n\n  public GetResource(relativePath: string): IResource {\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async TryGetResourcePromise(\n    relativePath: string,\n    collectionQuery: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    await this.initPath(relativePath, collectionQuery);\n\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async RefreshResource(\n    relativePath: string,\n    collectionQuery: messageTypes.CollectionQueryType\n  ) {\n    await this.initPath(relativePath, collectionQuery);\n    const resource = this.resources[relativePath];\n    log(\"resourceManager.RefreshResource\", { relativePath });\n\n    const collection = resource.collection;\n    const query = this.applyQuery(collection, collectionQuery);\n    const newDocs = await query.get();\n\n    resource.list = newDocs.docs.map(doc => this.parseFireStoreDocument(doc));\n  }\n\n  public async GetSingleDoc(relativePath: string, docId: string) {\n    await this.initPath(relativePath);\n    const resource = this.resources[relativePath];\n    const res = await resource.collection.doc(docId).get();\n    if (!res.exists) {\n      throw new Error(\"react-admin-firebase: No id found matching: \" + docId);\n    }\n    const result = this.parseFireStoreDocument(res);\n    return result;\n  }\n\n  private async initPath(\n    relativePath: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<void> {\n    const absolutePath = getAbsolutePath(this.options.rootRef, relativePath);\n    log(\"resourceManager.initPath:::\", { absolutePath });\n    const isAccessible = await this.isCollectionAccessible(\n      absolutePath,\n      collectionQuery\n    );\n\n    const hasBeenInited = this.resources[relativePath];\n    if (!isAccessible) {\n      if (hasBeenInited) {\n        this.removeResource(relativePath);\n      }\n      return;\n    }\n    if (hasBeenInited) {\n      return;\n    }\n    const collection = this.db.collection(absolutePath);\n    const list: Array<{}> = [];\n    const resource: IResource = {\n      collection: collection,\n      list: list,\n      path: relativePath,\n      pathAbsolute: absolutePath\n    };\n    this.resources[relativePath] = resource;\n  }\n\n  private parseFireStoreDocument(doc: QueryDocumentSnapshot): {} {\n    const data = doc.data();\n    Object.keys(data).forEach(key => {\n      const value = data[key];\n      if (value && value.toDate && value.toDate instanceof Function) {\n        data[key] = value.toDate();\n      }\n    });\n    // React Admin requires an id field on every document,\n    // So we can just using the firestore document id\n    return { id: doc.id, ...data };\n  }\n\n  public async getUserLogin(): Promise<User> {\n    return new Promise((resolve, reject) => {\n      this.fireWrapper.auth().onAuthStateChanged(user => {\n        resolve(user);\n      });\n    });\n  }\n\n  private async isCollectionAccessible(\n    absolutePath: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<boolean> {\n    try {\n      const collection = this.db.collection(absolutePath);\n      const query = this.applyQuery(collection, collectionQuery);\n\n      await query.get();\n    } catch (error) {\n      return false;\n    }\n    return true;\n  }\n\n  private removeResource(resourceName: string) {\n    delete this.resources[resourceName];\n  }\n\n  private applyQuery(\n    collection: CollectionReference,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): CollectionReference {\n    if (!collectionQuery) return collection;\n\n    return collectionQuery(collection);\n  }\n}\n","function isEmptyObj(obj) {\n  if (!obj) {\n    return true;\n  }\n  return JSON.stringify(obj) === '{}';\n}\n\nexport function sortArray(\n  data: Array<{}>,\n  field: string,\n  dir: 'asc' | 'desc'\n): void {\n  data.sort((a: {}, b: {}) => {\n    const rawA = a[field];\n    const rawB = b[field];\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\n    let aValue: string, bValue: string;\n    if (isNumberField) {\n      aValue = rawA;\n      bValue = rawB;\n    } else {\n      aValue = (a[field] || '').toString().toLowerCase();\n      bValue = (b[field] || '').toString().toLowerCase();\n    }\n    if (aValue > bValue) {\n      return dir === 'asc' ? 1 : -1;\n    }\n    if (aValue < bValue) {\n      return dir === 'asc' ? -1 : 1;\n    }\n    return 0;\n  });\n}\n\nexport function filterArray(\n  data: Array<{}>,\n  filterFields: { [field: string]: string }\n): Array<{}> {\n  if (isEmptyObj(filterFields)) {\n    return data;\n  }\n  const fieldNames = Object.keys(filterFields);\n  return data.filter(item =>\n    fieldNames.reduce((previousMatched, fieldName) => {\n      let fieldVal = filterFields[fieldName];\n      if (fieldVal == null || fieldVal == undefined) {\n        fieldVal = '';\n      }\n      const fieldSearchText = fieldVal.toString().toLowerCase();\n      const dataFieldValue = item[fieldName];\n      if (dataFieldValue == null) {\n        return false;\n      }\n      const currentIsMatched = dataFieldValue\n        .toString()\n        .toLowerCase()\n        .includes(fieldSearchText);\n      return previousMatched || currentIsMatched;\n    }, false)\n  );\n}\n","import { FirebaseFirestore } from \"@firebase/firestore-types\";\nimport { ResourceManager, IResource } from \"./ResourceManager\";\nimport { RAFirebaseOptions } from \"index\";\nimport { log, logError } from \"../../misc/logger\";\nimport { sortArray, filterArray } from \"../../misc/arrayHelpers\";\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\nimport { IFirebaseClient } from \"./IFirebaseClient\";\nimport { messageTypes } from \"../../misc/messageTypes\";\nimport { joinPaths } from \"../../misc/pathHelper\";\n\nexport class FirebaseClient implements IFirebaseClient {\n  private db: FirebaseFirestore;\n  private rm: ResourceManager;\n\n  constructor(\n    private fireWrapper: IFirebaseWrapper,\n    private options: RAFirebaseOptions\n  ) {\n    this.db = fireWrapper.db();\n    this.rm = new ResourceManager(this.fireWrapper, this.options);\n  }\n  public async apiGetList(\n    resourceName: string,\n    params: messageTypes.IParamsGetList\n  ): Promise<messageTypes.IResponseGetList> {\n    log(\"apiGetList\", { resourceName, params });\n\n    const collectionQuery = params.filter.collectionQuery;\n    delete params.filter.collectionQuery;\n\n    const r = await this.tryGetResource(\n      resourceName,\n      \"REFRESH\",\n      collectionQuery\n    );\n    const data = r.list;\n    if (params.sort != null) {\n      const { field, order } = params.sort;\n      if (order === \"ASC\") {\n        sortArray(data, field, \"asc\");\n      } else {\n        sortArray(data, field, \"desc\");\n      }\n    }\n    // @ts-ignore\n    const filteredData = filterArray(data, params.filter);\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n    const pageEnd = pageStart + params.pagination.perPage;\n    const dataPage = filteredData.slice(pageStart, pageEnd);\n    const total = r.list.length;\n    return {\n      data: dataPage,\n      total\n    };\n  }\n  public async apiGetOne(\n    resourceName: string,\n    params: messageTypes.IParamsGetOne\n  ): Promise<messageTypes.IResponseGetOne> {\n    log(\"apiGetOne\", { resourceName, params });\n    try {\n      const data = await this.rm.GetSingleDoc(resourceName, params.id);\n      return { data: data };\n    } catch (error) {\n      throw new Error(\n        \"Error getting id: \" + params.id + \" from collection: \" + resourceName\n      );\n    }\n  }\n  public async apiCreate(\n    resourceName: string,\n    params: messageTypes.IParamsCreate\n  ): Promise<messageTypes.IResponseCreate> {\n    const r = await this.tryGetResource(resourceName);\n    log(\"apiCreate\", { resourceName, resource: r, params });\n    const currentUserEmail = await this.getCurrentUserEmail();\n    const hasOverridenDocId = params.data && params.data.id;\n    if (hasOverridenDocId) {\n      const overridenId = params.data.id;\n      const data = await this.parseDataAndUpload(r, overridenId, params.data);\n      if (!overridenId) {\n        throw new Error(\"id must be a valid string\");\n      }\n\n      const docObj = this.options.timestamps\n        ? {\n          ...data,\n          createdate: this.fireWrapper.serverTimestamp(),\n          lastupdate: this.fireWrapper.serverTimestamp(),\n          createdby: currentUserEmail,\n          updatedby: currentUserEmail\n        } : {\n          ...data,\n        };\n\n      await r.collection.doc(overridenId).set(docObj, { merge: true });\n      return {\n        data: {\n          ...data,\n          id: overridenId\n        }\n      };\n    }\n    const newId = this.db.collection(\"collections\").doc().id;\n    const data = await this.parseDataAndUpload(r, newId, params.data);\n    const docObj = this.options.timestamps\n      ? {\n        ...data,\n        createdate: this.fireWrapper.serverTimestamp(),\n        lastupdate: this.fireWrapper.serverTimestamp(),\n        createdby: currentUserEmail,\n        updatedby: currentUserEmail\n      } : {\n        ...data,\n      };\n    await r.collection.doc(newId).set(docObj, { merge: false });\n    return {\n      data: {\n        ...data,\n        id: newId\n      }\n    };\n  }\n  public async apiUpdate(\n    resourceName: string,\n    params: messageTypes.IParamsUpdate\n  ): Promise<messageTypes.IResponseUpdate> {\n    const id = params.id;\n    delete params.data.id;\n    const r = await this.tryGetResource(resourceName);\n    log(\"apiUpdate\", { resourceName, resource: r, params });\n    const currentUserEmail = await this.getCurrentUserEmail();\n    const data = await this.parseDataAndUpload(r, id, params.data);\n\n    const docObj = this.options.timestamps\n      ? {\n        ...data,\n        lastupdate: this.fireWrapper.serverTimestamp(),\n        updatedby: currentUserEmail\n      } : {\n        ...data,\n      };\n\n    r.collection\n      .doc(id)\n      .update(docObj)\n      .catch(error => {\n        logError(\"apiUpdate error\", { error });\n      });\n    return {\n      data: {\n        ...data,\n        id: id\n      }\n    };\n  }\n  public async apiUpdateMany(\n    resourceName: string,\n    params: messageTypes.IParamsUpdateMany\n  ): Promise<messageTypes.IResponseUpdateMany> {\n    delete params.data.id;\n    const r = await this.tryGetResource(resourceName);\n    log(\"apiUpdateMany\", { resourceName, resource: r, params });\n    const ids = params.ids;\n    const currentUserEmail = await this.getCurrentUserEmail();\n    const returnData = await Promise.all(\n      ids.map(async id => {\n        const data = await this.parseDataAndUpload(r, id, params.data);\n        const docObj = this.options.timestamps\n          ? {\n            ...data,\n            lastupdate: this.fireWrapper.serverTimestamp(),\n            updatedby: currentUserEmail\n          } : {\n            ...data,\n          };\n        r.collection\n          .doc(id)\n          .update(docObj)\n          .catch(error => {\n            logError(\"apiUpdateMany error\", { error });\n          });\n        return {\n          ...data,\n          id: id\n        };\n      })\n    );\n    return {\n      data: returnData\n    };\n  }\n  public async apiDelete(\n    resourceName: string,\n    params: messageTypes.IParamsDelete\n  ): Promise<messageTypes.IResponseDelete> {\n    const r = await this.tryGetResource(resourceName);\n    log(\"apiDelete\", { resourceName, resource: r, params });\n    r.collection\n      .doc(params.id)\n      .delete()\n      .catch(error => {\n        logError(\"apiDelete error\", { error });\n      });\n    return {\n      data: params.previousData\n    };\n  }\n  public async apiDeleteMany(\n    resourceName: string,\n    params: messageTypes.IParamsDeleteMany\n  ): Promise<messageTypes.IResponseDeleteMany> {\n    const r = await this.tryGetResource(resourceName);\n    log(\"apiDeleteMany\", { resourceName, resource: r, params });\n    const returnData: { id: string }[] = [];\n    const batch = this.db.batch();\n    for (const id of params.ids) {\n      batch.delete(r.collection.doc(id));\n      returnData.push({ id });\n    }\n    batch.commit().catch(error => {\n      logError(\"apiDeleteMany error\", { error });\n    });\n    return { data: returnData };\n  }\n  public async apiGetMany(\n    resourceName: string,\n    params: messageTypes.IParamsGetMany\n  ): Promise<messageTypes.IResponseGetMany> {\n    const r = await this.tryGetResource(resourceName, \"REFRESH\");\n    log(\"apiGetMany\", { resourceName, resource: r, params });\n    const ids = params.ids;\n    const matchDocSnaps = await Promise.all(\n      ids.map(id => r.collection.doc(id).get())\n    );\n    const matches = matchDocSnaps.map(snap => {\n      return { ...snap.data(), id: snap.id };\n    });\n    return {\n      data: matches\n    };\n  }\n  public async apiGetManyReference(\n    resourceName: string,\n    params: messageTypes.IParamsGetManyReference\n  ): Promise<messageTypes.IResponseGetManyReference> {\n    const r = await this.tryGetResource(resourceName, \"REFRESH\");\n    log(\"apiGetManyReference\", { resourceName, resource: r, params });\n    const data = r.list;\n    const targetField = params.target;\n    const targetValue = params.id;\n    const matches = data.filter(val => val[targetField] === targetValue);\n    if (params.sort != null) {\n      const { field, order } = params.sort;\n      if (order === \"ASC\") {\n        sortArray(data, field, \"asc\");\n      } else {\n        sortArray(data, field, \"desc\");\n      }\n    }\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n    const pageEnd = pageStart + params.pagination.perPage;\n    const dataPage = matches.slice(pageStart, pageEnd);\n    const total = matches.length;\n    return { data: dataPage, total };\n  }\n  private async tryGetResource(\n    resourceName: string,\n    refresh?: \"REFRESH\",\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    if (refresh) {\n      await this.rm.RefreshResource(resourceName, collectionQuery);\n    }\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n  private async getCurrentUserEmail() {\n    const user = await this.rm.getUserLogin();\n    if (user) {\n      return user.email;\n    } else {\n      return \"annonymous user\";\n    }\n  }\n\n  private async parseDataAndUpload(r: IResource, id: string, data: any, path?: string, parent?: string) {\n    if (!data) {\n      return data;\n    }\n    let docPath = path ? path : r.collection.doc(id).path;\n\n    await Promise.all(\n      Object.keys(data).map(async fieldName => {\n        const val = data[fieldName];\n        const isArray = Array.isArray(val);\n        if (isArray) {\n          await Promise.all(\n            (val as []).map((arrayObj, index) => {\n              if (!!val[index] && val[index].hasOwnProperty(\"rawFile\")) {\n                return Promise.all([\n                  this.parseDataField(val[index], docPath, fieldName + index)\n                ]);\n              } else {\n                return Promise.all(\n                  Object.keys(arrayObj).map(arrayObjFieldName => {\n                    const arrayObjVal: any = arrayObj[arrayObjFieldName];\n                    if (!!arrayObjVal && typeof arrayObjVal === 'object' && !arrayObjVal.hasOwnProperty(\"rawFile\")) {\n                      docPath += `/${index}/${fieldName}`;\n                      return this.parseDataAndUpload(r, id, arrayObjVal, docPath);\n                    }\n                    return this.parseDataField(\n                      arrayObjVal,\n                      docPath,\n                      `/${fieldName}/${index}/${arrayObjFieldName}`\n                    );\n                  })\n                );\n              }\n            })\n          );\n        }\n        if (!!val && typeof val === 'object' && !val.hasOwnProperty(\"rawFile\")) {\n          return this.parseDataAndUpload(r, id, val, docPath, fieldName);\n        }\n        if (parent) {\n          docPath += `/${parent}`;\n        }\n        await this.parseDataField(val, docPath, fieldName);\n      })\n    );\n    return data;\n  }\n\n  private async parseDataField(ref: any, docPath: string, fieldPath: string) {\n    const hasRawFile = !!ref && ref.hasOwnProperty(\"rawFile\");\n    if (!hasRawFile) {\n      return;\n    }\n\n    const sourceFieldName = Object.keys(ref).find((key) => key !== 'rawFile' && key !== 'title');\n\n    ref[sourceFieldName] = await this.uploadAndGetLink(ref.rawFile, docPath, fieldPath);\n    delete ref.rawFile;\n  }\n\n  private async uploadAndGetLink(\n    rawFile: any,\n    docPath: string,\n    fieldPath: string\n  ): Promise<string> {\n    const storagePath = joinPaths(docPath, fieldPath);\n    const storageLink = await this.saveFile(storagePath, rawFile);\n    return storageLink;\n  }\n\n  private async saveFile(storagePath: string, rawFile: any): Promise<string> {\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\n    const task = this.fireWrapper\n      .storage()\n      .ref(storagePath)\n      .put(rawFile);\n    try {\n      const taskResult: firebase.storage.UploadTaskSnapshot = await new Promise(\n        (res, rej) => task.then(res).catch(rej)\n      );\n      const getDownloadURL = await taskResult.ref.getDownloadURL();\n      log(\"saveFile() saved file\", {\n        storagePath,\n        taskResult,\n        getDownloadURL\n      });\n      return getDownloadURL;\n    } catch (storageError) {\n      if (storageError.code === \"storage/unknown\") {\n        logError(\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\n          { storageError }\n        );\n      } else {\n        logError(\"saveFile() error saving file\", {\n          storageError\n        });\n      }\n    }\n  }\n}\n","import {\n  CREATE,\n  DELETE,\n  DELETE_MANY,\n  GET_LIST,\n  GET_MANY,\n  GET_MANY_REFERENCE,\n  GET_ONE,\n  UPDATE,\n  UPDATE_MANY\n} from \"react-admin\";\nimport { log, CheckLogging } from \"../misc/logger\";\nimport { RAFirebaseOptions } from \"./RAFirebaseOptions\";\nimport { FirebaseClient } from \"./database/FirebaseClient\";\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\nimport { getAbsolutePath } from \"misc/pathHelper\";\n\nexport let fb: FirebaseClient;\n\nexport function DataProvider(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\n  const options = optionsInput || {};\n  VerifyDataProviderArgs(firebaseConfig, options);\n  CheckLogging(firebaseConfig, options);\n\n  log(\"react-admin-firebase:: Creating FirebaseDataProvider\", { firebaseConfig, options });\n  const fireWrapper = new FirebaseWrapper();\n  fireWrapper.init(firebaseConfig, optionsInput);\n  fb = new FirebaseClient(fireWrapper, options);\n  async function providerApi(type: string, resourceName: string, params: any): Promise<any> {\n    log(\"FirebaseDataProvider: event\", { type, resourceName, params });\n    switch (type) {\n      case GET_MANY:\n        return fb.apiGetMany(resourceName, params);\n      case GET_MANY_REFERENCE:\n        return fb.apiGetManyReference(resourceName, params);\n      case GET_LIST:\n        return fb.apiGetList(resourceName, params);\n      case GET_ONE:\n        return fb.apiGetOne(resourceName, params);\n      case CREATE:\n        return fb.apiCreate(resourceName, params);\n      case UPDATE:\n        return fb.apiUpdate(resourceName, params);\n      case UPDATE_MANY:\n        return fb.apiUpdateMany(resourceName, params);\n      case DELETE:\n        return fb.apiDelete(resourceName, params);\n      case DELETE_MANY:\n        return fb.apiDeleteMany(resourceName, params);\n      default:\n        return {};\n    }\n  }\n  return providerApi;\n}\n\nfunction VerifyDataProviderArgs(firebaseConfig: {}, options?: RAFirebaseOptions) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      \"Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider\"\n    );\n  }\n  if (options.rootRef) {\n    // Will throw error if rootRef doesn't point to a document\n    getAbsolutePath(options.rootRef, 'test');\n  }\n}","import { IFirebaseWrapper } from \"./IFirebaseWrapper\";\nimport { RAFirebaseOptions } from \"providers/RAFirebaseOptions\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/storage\";\n\nexport class FirebaseWrapper implements IFirebaseWrapper {\n  private firestore: firebase.firestore.Firestore;\n  private app;\n\n  constructor() { }\n\n  public init(firebaseConfig: {}, options: RAFirebaseOptions): void {\n    this.app = ObtainFirebaseApp(firebaseConfig, options) as any;\n    this.firestore = this.app.firestore();\n  }\n  public db(): firebase.firestore.Firestore {\n    return this.firestore;\n  }\n  public serverTimestamp() {\n    return firebase.firestore.FieldValue.serverTimestamp();\n  }\n  public auth() {\n    return this.app.auth();\n  }\n  public storage() {\n    return this.app.storage();\n  }\n}\n\nfunction ObtainFirebaseApp(firebaseConfig: {}, options: RAFirebaseOptions) {\n  if (options.app) {\n    return options.app;\n  }\n  const isInitialized = !!firebase.apps.length;\n  if (isInitialized) {\n    const app = firebase.app();\n    return app;\n  } else {\n    const app = firebase.initializeApp(firebaseConfig);\n    return app;\n  }\n}","// import * as firebase from \"firebase\";\nimport { FirebaseAuth } from \"@firebase/auth-types\";\n\nimport {\n  AUTH_LOGIN,\n  AUTH_LOGOUT,\n  AUTH_ERROR,\n  AUTH_CHECK,\n  AUTH_GET_PERMISSIONS\n} from \"react-admin\";\nimport { log, CheckLogging } from \"../misc/logger\";\nimport { RAFirebaseOptions } from \"./RAFirebaseOptions\";\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\n\nclass AuthClient {\n  private auth: FirebaseAuth;\n\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\n    const options = optionsInput || {};\n    log(\"Auth Client: initializing...\", {firebaseConfig, options});\n    const fireWrapper = new FirebaseWrapper();\n    fireWrapper.init(firebaseConfig, options);\n    this.auth = fireWrapper.auth();\n  }\n\n  public async HandleAuthLogin(params) {\n    const { username, password } = params;\n\n    try {\n      const user = await this.auth.signInWithEmailAndPassword(\n        username,\n        password\n      );\n      log(\"HandleAuthLogin: user sucessfully logged in\", { user });\n      return user\n    } catch (e) {\n      log(\"HandleAuthLogin: invalid credentials\", { params });\n      throw new Error(\"Login error: invalid credentials\");\n    }\n  }\n\n  public async HandleAuthLogout(params) {\n    await this.auth.signOut();\n  }\n\n  public async HandleAuthError(params) { }\n\n  public async HandleAuthCheck(params) {\n    try {\n      const user = await this.getUserLogin();\n      log(\"HandleAuthCheck: user is still logged in\", { user });\n    } catch (e) {\n      log(\"HandleAuthCheck: \", { e });\n      throw new Error(\"Auth check error: \" + e);\n    }\n  }\n\n  public async getUserLogin() {\n    return new Promise((resolve, reject) => {\n      this.auth.onAuthStateChanged((user) => {\n        if (user) {\n          resolve(user);\n        } else {\n          reject(\"User not logged in\");\n        }\n      });\n    });\n  }\n\n  public async HandleGetCurrent() {\n    try {\n      const user = await this.getUserLogin();\n      log(\"HandleGetCurrent: current user\", { user });\n      return user;\n    } catch (e) {\n      log(\"HandleGetCurrent: no user is logged in\", { e });\n      return null;\n    }\n  }\n\n  public async HandleGetPermissions() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.claims;\n    } catch (e) {\n      log(\"HandleGetPermission: no user is logged in or tokenResult error\", {\n        e\n      });\n      return null;\n    }\n  }\n}\n\nexport function AuthProvider(firebaseConfig: {}, options: RAFirebaseOptions) {\n  VerifyAuthProviderArgs(firebaseConfig, options);\n  const auth = new AuthClient(firebaseConfig, options);\n  CheckLogging(firebaseConfig, options);\n\n  return async (type: string, params: {}) => {\n    log(\"Auth Event: \", { type, params });\n    {\n      switch (type) {\n        case AUTH_LOGIN:\n          return auth.HandleAuthLogin(params);\n        case AUTH_LOGOUT:\n          return auth.HandleAuthLogout(params);\n        case AUTH_ERROR:\n          return auth.HandleAuthError(params);\n        case AUTH_CHECK:\n          return auth.HandleAuthCheck(params);\n        case \"AUTH_GETCURRENT\":\n          return auth.HandleGetCurrent();\n        case AUTH_GET_PERMISSIONS:\n          return auth.HandleGetPermissions();\n        default:\n          throw new Error(\"Unhandled auth type:\" + type);\n      }\n    }\n  };\n}\n\nfunction VerifyAuthProviderArgs(firebaseConfig: {}, options: RAFirebaseOptions) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      \"Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider\"\n    );\n  }\n}\n"],"names":["const","observeRequest","dataProvider","options","type","resource","params","safeOptions","Array","isArray","watch","includes","dontwatch","subscribe","observer","then","results","next","catch","error","unsubscribe","RealtimeSaga","realtimeSaga","log","description","obj","ISDEBUG","console","logError","CheckLogging","config","logging","_catch","body","recover","result","e","getAbsolutePath","rootRef","relativePath","Error","withSlashes","path","join","split","length","slice","Symbol","iterator","asyncIterator","ResourceManager","constructor","fireWrapper","db","sortArray","data","field","dir","sort","a","b","aValue","bValue","rawA","rawB","Number","isFinite","toString","toLowerCase","GetResource","this","resources","TryGetResourcePromise","collectionQuery","_this","initPath","RefreshResource","_this2","query","applyQuery","collection","get","newDocs","list","docs","map","doc","parseFireStoreDocument","GetSingleDoc","docId","_this3","res","exists","absolutePath","_this4","isCollectionAccessible","isAccessible","hasBeenInited","pathAbsolute","removeResource","Object","keys","forEach","key","value","toDate","Function","id","getUserLogin","Promise","resolve","reject","auth","onAuthStateChanged","user","_this6","resourceName","FirebaseClient","rm","apiGetList","filter","tryGetResource","r","filteredData","filterFields","JSON","stringify","fieldNames","item","reduce","previousMatched","fieldName","fieldVal","undefined","fieldSearchText","dataFieldValue","currentIsMatched","filterArray","pageStart","pagination","page","perPage","apiGetOne","apiCreate","getCurrentUserEmail","currentUserEmail","newId","parseDataAndUpload","docObj","timestamps","createdate","serverTimestamp","lastupdate","createdby","updatedby","set","merge","hasOverridenDocId","overridenId","apiUpdate","update","apiUpdateMany","_this5","ids","all","returnData","apiDelete","delete","previousData","apiDeleteMany","_this7","batch","push","commit","apiGetMany","matchDocSnaps","snap","apiGetManyReference","targetField","target","targetValue","matches","val","refresh","_this10","email","parent","docPath","hasOwnProperty","_this12","parseDataField","arrayObj","index","arrayObjFieldName","arrayObjVal","ref","fieldPath","sourceFieldName","find","uploadAndGetLink","rawFile","storagePath","saveFile","task","storage","put","rej","taskResult","getDownloadURL","storageError","code","fb","FirebaseWrapper","DataProvider","firebaseConfig","optionsInput","app","VerifyDataProviderArgs","init","GET_MANY","GET_MANY_REFERENCE","GET_LIST","GET_ONE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","firebase","ObtainFirebaseApp","firestore","FieldValue","AuthClient","AuthProvider","VerifyAuthProviderArgs","AUTH_LOGIN","HandleAuthLogin","AUTH_LOGOUT","HandleAuthLogout","AUTH_ERROR","HandleAuthError","AUTH_CHECK","HandleAuthCheck","HandleGetCurrent","AUTH_GET_PERMISSIONS","HandleGetPermissions","signInWithEmailAndPassword","username","password","signOut","getIdTokenResult","token","claims"],"mappings":"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"}